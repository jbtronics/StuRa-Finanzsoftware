<?php

namespace App\Controller\Admin;

use App\Admin\Field\VichyFileField;
use App\Entity\SEPAExport;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\MoneyField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use PHP_CodeSniffer\Generators\Text;

class SEPAExportCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return SEPAExport::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInSingular('sepa_export.label')
            //->setSearchFields(['name', 'iban', 'bic', 'comment', 'account_name'])
            ->setEntityLabelInPlural('sepa_export.labelp');
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions->disable(Crud::PAGE_NEW);
        $actions->add(Crud::PAGE_INDEX, Action::DETAIL);

        return parent::configureActions($actions); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        $xml_file = VichyFileField::new('xml_file', 'sepa_export.xml_file');
        $id = IdField::new('id', 'sepa_export.id');
        $number_of_payments = NumberField::new('number_of_payments', 'sepa_export.number_of_payments');
        $initiator_bic = TextField::new('initiator_bic', 'sepa_export.initiator_bic');
        $initiator_iban = TextField::new('initiator_iban', 'sepa_export.initiator_iban');
        $booking_date = DateTimeField::new('booking_date', 'sepa_export.booking_date');
        $total_sum = MoneyField::new('total_sum', 'sepa_export.total_sum')
            ->setCurrency('EUR')
            ->setStoredAsCents(true);
        $sepa_message_id = TextField::new('sepa_message_id', 'sepa_export.message_id');
        $description = TextField::new('description', 'sepa_export.description');
        $comment = TextEditorField::new('comment', 'sepa_export.comment');
        $group_ulid = TextField::new('group_ulid', 'sepa_export.group_ulid')->onlyOnDetail();
        $last_modified = DateTimeField::new('last_modified', 'last_modified');
        $creationDate = DateTimeField::new('creation_date', 'creation_date')->onlyOnDetail();
        $associated_payment_orders = AssociationField::new('associated_payment_orders')
            ->setTemplatePath('admin/field/sepa_export_association.html.twig')
            ->setCrudController(PaymentOrderCrudController::class);


        if (Crud::PAGE_INDEX === $pageName) {
            return [$id, $number_of_payments, $total_sum, $description, $initiator_iban, $booking_date];
        }

        if (Crud::PAGE_DETAIL === $pageName) {
            return [
                $xml_file,

                FormField::addPanel('sepa_export.infos')->collapsible(),
                $id,
                $number_of_payments,
                $total_sum,
                $initiator_iban,
                $initiator_bic,
                $description,
                $booking_date,
                $associated_payment_orders,
                $comment,

                FormField::addPanel('sepa_export.advanced')->collapsible(),
                $sepa_message_id,
                $group_ulid,
                $last_modified,
                $creationDate,
            ];
        }

        if (Crud::PAGE_EDIT === $pageName) {
            return [$comment];
        }
    }
}
